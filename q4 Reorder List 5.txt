Q)You are given the head of a singly linked-list. The list can be represented as:
L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:
L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.
Input Format

The first line of each test case or query contains the elements of the singly linked list separated by a single space.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element.
Constraints

Time: 1 Sec
Output Format

Print the reorder of the list
Sample Input 0

1 2 3 4 -1
Sample Output 0

1 4 2 3
Sample Input 1

1 2 3 4 5 -1
Sample Output 1

1 5 2 4 3

code:

import java.util.*;

public class Main {

    static class ListNode {
        int val;
        ListNode next;

        ListNode(int x) {
            val = x;
            next = null;
        }
    }

    public static void reorderList(ListNode head) {
        if (head == null || head.next == null) {
            return;
        }
        
        // Step 1: find the middle of the list
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        // Step 2: reverse the second half of the list
        ListNode prev = null;
        ListNode curr = slow.next;
        slow.next = null;
        while (curr != null) {
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        
        // Step 3: merge the first and second half of the list
        ListNode p1 = head;
        ListNode p2 = prev;
        while (p2 != null) {
            ListNode next1 = p1.next;
            ListNode next2 = p2.next;
            p1.next = p2;
            p2.next = next1;
            p1 = next1;
            p2 = next2;
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // Taking input for the linked list
        ListNode head = null;
        ListNode tail = null;
        while (sc.hasNextInt()) {
            int val = sc.nextInt();
            if (val == -1) {
                break;
            }
            ListNode node = new ListNode(val);
            if (head == null) {
                head = node;
                tail = node;
            } else {
                tail.next = node;
                tail = node;
            }
        }
        
        // Calling the function to reorder the list
        reorderList(head);
        
        // Printing the reordered list
        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
    }
}